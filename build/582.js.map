{"version":3,"file":"582.js","mappings":"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","sources":["webpack://block-collections/./src/blocks/CustomFooks.js","webpack://block-collections/./src/blocks/ShadowStyle.js","webpack://block-collections/./src/blocks/TypographyControls.js","webpack://block-collections/./src/blocks/design-text-ctrl/edit.js","webpack://block-collections/./src/blocks/hslToRgb.js","webpack://block-collections/./src/blocks/iframeFooks.js"],"sourcesContent":["import { useRef, useEffect, useState } from '@wordpress/element';\r\nimport isEqual from 'lodash/isEqual';\r\n\r\n//useRefで参照したDOM要素の大きさを取得するカスタムフック\r\nexport function useElementWidth() {\r\n  const ref = useRef(null);\r\n  const [width, setWidth] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      for (let entry of entries) {\r\n        setWidth(entry.contentRect.width);\r\n      }\r\n    });\r\n\r\n    if (ref.current) {\r\n      resizeObserver.observe(ref.current);\r\n    }\r\n\r\n    return () => {\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return [ref, width];\r\n}\r\n\r\n//ブロックの背景色を取得するカスタムフック\r\nexport function useElementBackgroundColor(blockRef, style) {\r\n  const [baseColor, setBaseColor] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (blockRef.current && style) {\r\n      if (style.backgroundColor) {\r\n        setBaseColor(style.backgroundColor);\r\n      } else {//レンダリング結果から背景色を取得\r\n        const computedStyles = getComputedStyle(blockRef.current);\r\n        setBaseColor(computedStyles.backgroundColor);\r\n      }\r\n    }\r\n\r\n  }, [style, blockRef]);\r\n\r\n  return baseColor;\r\n}\r\n\r\n//ViewPortの大きさでモバイルを判断(767px以下がモバイル)するカスタムフック\r\nexport function useIsMobile() {\r\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 767);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setIsMobile(window.innerWidth <= 767);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return isMobile;\r\n};\r\n\r\nexport function useIsIframeMobile() {\r\n  const [isMobile, setIsMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // iframeのcontentWindowを監視する関数\r\n    const checkIframeSize = () => {\r\n      const iframeInstance = document.getElementsByName('editor-canvas')[0];\r\n      if (iframeInstance && iframeInstance.contentWindow) {\r\n        setIsMobile(iframeInstance.contentWindow.innerWidth <= 767);\r\n      }\r\n    };\r\n\r\n    // iframeのcontentWindowのリサイズイベントにリスナーを追加\r\n    const iframeInstance = document.getElementsByName('editor-canvas')[0];\r\n    if (iframeInstance && iframeInstance.contentWindow) {\r\n      iframeInstance.contentWindow.addEventListener('resize', checkIframeSize);\r\n    }\r\n\r\n    // 初期チェックを実行\r\n    checkIframeSize();\r\n\r\n    // クリーンアップ関数\r\n    return () => {\r\n      if (iframeInstance && iframeInstance.contentWindow) {\r\n        iframeInstance.contentWindow.removeEventListener('resize', checkIframeSize);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return isMobile;\r\n}\r\n\r\n\r\n//たくさんの要素をもつオブジェクトや配列の内容の変化で発火するuseEffect\r\nexport function useDeepCompareEffect(callback, dependencies) {\r\n  const dependenciesRef = useRef();\r\n\r\n  if (!isEqual(dependencies, dependenciesRef.current)) {\r\n    dependenciesRef.current = dependencies;\r\n  }\r\n\r\n  useEffect(() => {\r\n    return callback();\r\n  }, [dependenciesRef.current]);\r\n}\r\n","\r\nimport { __ } from '@wordpress/i18n';\r\nimport {\r\n  __experimentalPanelColorGradientSettings as PanelColorGradientSettings,\r\n} from '@wordpress/block-editor';\r\nimport {\r\n  PanelBody,\r\n  PanelRow,\r\n  ToggleControl,\r\n  RangeControl,\r\n  RadioControl\r\n} from '@wordpress/components';\r\nimport { useState, useEffect } from '@wordpress/element';\r\nimport { dispatch } from '@wordpress/data';\r\nimport { hslToRgb16, HexToRGB, rgb16ToHsl } from './hslToRgb';\r\n\r\n//方向と距離\r\nconst dirctionDigit = (direction, distance) => {\r\n  let destTopLeft, destTopRight, destBottomLeft, destBottomRight;\r\n  switch (direction) {\r\n    case \"top_left\":\r\n      destTopLeft = distance;\r\n      destTopRight = distance;\r\n      destBottomLeft = distance * -1;\r\n      destBottomRight = distance * -1;\r\n      break;\r\n    case \"top_right\":\r\n      destTopLeft = distance * -1;\r\n      destTopRight = distance;\r\n      destBottomLeft = distance;\r\n      destBottomRight = distance * -1;\r\n      break;\r\n    case \"bottom_left\":\r\n      destTopLeft = distance;\r\n      destTopRight = distance * -1;\r\n      destBottomLeft = distance * -1;\r\n      destBottomRight = distance;\r\n      break;\r\n    case \"bottom_right\":\r\n      destTopLeft = distance * -1;\r\n      destTopRight = distance * -1;\r\n      destBottomLeft = distance;\r\n      destBottomRight = distance;\r\n      break;\r\n    case \"right_bottom\":\r\n      destTopLeft = distance;\r\n      destTopRight = distance * -1;\r\n      destBottomLeft = distance * -1;\r\n      destBottomRight = distance;\r\n      break;\r\n    case \"top\":\r\n      destTopLeft = 0;\r\n      destTopRight = 0;\r\n      destBottomLeft = distance * -1;\r\n      destBottomRight = distance;\r\n      break;\r\n  }\r\n  return (\r\n    {\r\n      topLeft: destTopLeft,\r\n      topRight: destTopRight,\r\n      bottomLeft: destBottomLeft,\r\n      bottmRight: destBottomRight\r\n    }\r\n  )\r\n}\r\n\r\n// グラデーションの色値は通常'linear-gradient'または'radial-gradient'で始まるので、\r\n// これらのキーワードを探すことでグラデーションかどうかを判断します。\r\nfunction isGradient(colorValue) {\r\n  return colorValue.includes('linear-gradient') || colorValue.includes('radial-gradient');\r\n}\r\n\r\n\r\nexport const ShadowElm = (shadowState) => {\r\n  //let baseColor;\r\n  const {\r\n    shadowType,\r\n    spread,\r\n    lateral,\r\n    longitude,\r\n    nomalBlur,\r\n    shadowColor,\r\n    blur,\r\n    intensity,\r\n    distance,\r\n    newDirection,\r\n    clayDirection,\r\n    embos,\r\n    opacity,\r\n    depth,\r\n    bdBlur,\r\n    expand,\r\n    glassblur,\r\n    glassopa,\r\n    hasOutline,\r\n    baseColor\r\n  } = shadowState;\r\n\r\n  //ノーマル\r\n  if (shadowType === 'nomal') {\r\n    //boxshadowの生成\r\n    const ShadowStyle = embos === 'dent' ? {\r\n      style: {\r\n        boxShadow: `${lateral}px ${longitude}px ${nomalBlur}px ${spread}px transparent, inset ${lateral}px ${longitude}px ${nomalBlur}px ${spread}px ${shadowColor}`\r\n      }\r\n    } : {\r\n      style: {\r\n        boxShadow: `${lateral}px ${longitude}px ${nomalBlur}px ${spread}px ${shadowColor}, inset ${lateral}px ${longitude}px ${nomalBlur}px ${spread}px transparent`\r\n      }\r\n    }\r\n    //Shadowのスタイルを返す\r\n    return ShadowStyle;\r\n  }\r\n  //ニューモフィズム\r\n  else if (shadowType === 'newmor') {\r\n\r\n    //背景がグラデーションのときはセットしない\r\n    if (isGradient(baseColor)) {\r\n      dispatch('core/notices').createNotice(\r\n        'error',\r\n        __('Neumorphism cannot be set when the background color is a gradient. ', 'itmar_guest_contact_block'),\r\n        { type: 'snackbar', isDismissible: true, }\r\n      );\r\n      return null;\r\n    }\r\n    //ボタン背景色のHSL値\r\n    const hslValue = rgb16ToHsl(baseColor);\r\n    //影の明るさを変更\r\n    const lightVal = (hslValue.lightness + intensity) < 100 ? hslValue.lightness + intensity : 100;\r\n    const darkVal = (hslValue.lightness - intensity) > 0 ? hslValue.lightness - intensity : 0;\r\n    const lightValue = hslToRgb16(hslValue.hue, hslValue.saturation, lightVal);\r\n    const darkValue = hslToRgb16(hslValue.hue, hslValue.saturation, darkVal);\r\n    //boxshadowの生成\r\n    //立体の方向\r\n    const dircObj = dirctionDigit(newDirection, distance);\r\n\r\n    const baseStyle = {\r\n      style: {\r\n        border: 'none',\r\n        background: baseColor\r\n      }\r\n    }\r\n\r\n    const newmorStyle = embos === 'swell' ? {\r\n      style: {\r\n        ...baseStyle.style,\r\n        boxShadow: `${dircObj.topLeft}px ${dircObj.topRight}px ${blur}px ${darkValue}, ${dircObj.bottomLeft}px ${dircObj.bottmRight}px ${blur}px ${lightValue}, inset ${dircObj.topLeft}px ${dircObj.topRight}px ${blur}px transparent, inset ${dircObj.bottomLeft}px ${dircObj.bottmRight}px ${blur}px transparent`\r\n      }\r\n    } : {\r\n      style: {\r\n        ...baseStyle.style,\r\n        boxShadow: `${dircObj.topLeft}px ${dircObj.topRight}px ${blur}px transparent, ${dircObj.bottomLeft}px ${dircObj.bottmRight}px ${blur}px transparent, inset ${dircObj.topLeft}px ${dircObj.topRight}px ${blur}px ${darkValue}, inset ${dircObj.bottomLeft}px ${dircObj.bottmRight}px ${blur}px ${lightValue}`\r\n      }\r\n    }\r\n\r\n    //Shadowのスタイルを返す\r\n    return newmorStyle;\r\n  }\r\n\r\n  //クレイモーフィズム\r\n  else if (shadowType === 'claymor') {\r\n    //背景がグラデーションのときはセットしない\r\n    if (isGradient(baseColor)) {\r\n      dispatch('core/notices').createNotice(\r\n        'error',\r\n        __('claymorphism cannot be set when the background color is a gradient. ', 'itmar_guest_contact_block'),\r\n        { type: 'snackbar', isDismissible: true, }\r\n      );\r\n      return null;\r\n    }\r\n    const rgbValue = HexToRGB(baseColor)\r\n    const outsetObj = dirctionDigit(clayDirection, expand)\r\n    const insetObj = dirctionDigit(clayDirection, depth)\r\n    const baseStyle = {\r\n      style: {\r\n        background: `rgba(255, 255, 255, ${opacity})`,\r\n        backdropFilter: `blur(${bdBlur}px)`,\r\n        border: 'none',\r\n      }\r\n    }\r\n    const claymorStyle = {\r\n      ...baseStyle,\r\n      style: {\r\n        ...baseStyle.style,\r\n        boxShadow: `${outsetObj.topLeft}px ${outsetObj.bottmRight}px ${expand * 2}px 0px rgba(${rgbValue.red}, ${rgbValue.green}, ${rgbValue.blue}, 0.5), inset ${insetObj.topRight}px ${insetObj.bottomLeft}px 16px 0px rgba(${rgbValue.red}, ${rgbValue.green}, ${rgbValue.blue}, 0.6), inset 0px 11px 28px 0px rgb(255, 255, 255)`,\r\n      }\r\n    }\r\n    //attributesに保存\r\n    return claymorStyle;\r\n  }\r\n\r\n  //グラスモーフィズム\r\n  else if (shadowType === 'glassmor') {\r\n\r\n    const baseStyle = {\r\n      style: {\r\n        backgroundColor: `rgba(255, 255, 255, ${glassopa})`,\r\n        ...hasOutline ? { border: `1px solid rgba(255, 255, 255, 0.4)` } : {},\r\n        borderRightColor: `rgba(255, 255, 255, 0.2)`,\r\n        borderBottomColor: `rgba(255, 255, 255, 0.2)`,\r\n        backdropFilter: `blur( ${glassblur}px )`\r\n      }\r\n    }\r\n    const glassmorStyle = embos === 'swell' ? {\r\n      ...baseStyle,\r\n      style: {\r\n        ...baseStyle.style,\r\n        boxShadow: `0 8px 12px 0 rgba( 31, 38, 135, 0.37 ), inset 0 8px 12px 0 transparent`\r\n      }\r\n    } : {\r\n      ...baseStyle,\r\n      style: {\r\n        ...baseStyle.style,\r\n        boxShadow: `0 8px 12px 0 transparent, inset 0 8px 12px 0 rgba( 31, 38, 135, 0.37 )`\r\n\r\n      }\r\n    }\r\n\r\n    //attributesに保存\r\n    return glassmorStyle;\r\n  }\r\n}\r\n\r\nconst ShadowStyle = ({ shadowStyle, onChange }) => {\r\n  const [shadowState, setShadowState] = useState(shadowStyle);\r\n\r\n  const {\r\n    shadowType,\r\n    spread,\r\n    lateral,\r\n    longitude,\r\n    nomalBlur,\r\n    shadowColor,\r\n    blur,\r\n    intensity,\r\n    distance,\r\n    newDirection,\r\n    clayDirection,\r\n    embos,\r\n    opacity,\r\n    depth,\r\n    bdBlur,\r\n    expand,\r\n    glassblur,\r\n    glassopa,\r\n    hasOutline\r\n  } = shadowState;\r\n\r\n  //シャドーのスタイル変更と背景色変更に伴う親コンポーネントの変更\r\n  useEffect(() => {\r\n    const shadowElm = ShadowElm(shadowState);\r\n    if (shadowElm) onChange(shadowElm, shadowState)\r\n  }, [shadowState]);\r\n\r\n  return (\r\n    <>\r\n      <PanelBody title={__(\"Shadow Type\", 'itmar_block_collections')} initialOpen={true}>\r\n        <div className=\"itmar_shadow_type\">\r\n          <RadioControl\r\n            selected={shadowType}\r\n            options={[\r\n              { label: __(\"Nomal\", 'itmar_block_collections'), value: 'nomal' },\r\n              { label: __(\"Neumorphism\", 'itmar_block_collections'), value: 'newmor' },\r\n              { label: __(\"Claymorphism\", 'itmar_block_collections'), value: 'claymor' },\r\n              { label: __(\"Grassmophism\", 'itmar_block_collections'), value: 'glassmor' },\r\n            ]}\r\n            onChange={(changeOption) => setShadowState({ ...shadowState, shadowType: changeOption })}\r\n          />\r\n        </div>\r\n        {(shadowType !== 'claymor') &&\r\n          <div className=\"embos\">\r\n            <RadioControl\r\n              label={__(\"unevenness\", 'itmar_block_collections')}\r\n              selected={embos}\r\n              options={[\r\n                { value: 'swell' },\r\n                { value: 'dent' },\r\n\r\n              ]}\r\n              onChange={(changeOption) => setShadowState({ ...shadowState, embos: changeOption })}\r\n            />\r\n          </div>\r\n        }\r\n      </PanelBody>\r\n\r\n      {shadowType === 'nomal' &&\r\n        <PanelBody title={__(\"Nomal settings\", 'itmar_block_collections')} initialOpen={false}>\r\n          <RangeControl\r\n            value={spread}\r\n            label={__(\"Spread\", 'itmar_block_collections')}\r\n            max={50}\r\n            min={0}\r\n            onChange={(val) => setShadowState({ ...shadowState, spread: val })}\r\n            withInputField={false}\r\n          />\r\n          <RangeControl\r\n            value={lateral}\r\n            label={__(\"Lateral direction\", 'itmar_block_collections')}\r\n            max={50}\r\n            min={0}\r\n            onChange={(val) => setShadowState({ ...shadowState, lateral: val })}\r\n            withInputField={false}\r\n          />\r\n          <RangeControl\r\n            value={longitude}\r\n            label={__(\"Longitudinal direction\", 'itmar_block_collections')}\r\n            max={50}\r\n            min={0}\r\n            onChange={(val) => setShadowState({ ...shadowState, longitude: val })}\r\n            withInputField={false}\r\n          />\r\n          <RangeControl\r\n            value={nomalBlur}\r\n            label={__(\"Blur\", 'itmar_block_collections')}\r\n            max={20}\r\n            min={0}\r\n            onChange={(val) => setShadowState({ ...shadowState, nomalBlur: val })}\r\n            withInputField={false}\r\n          />\r\n          <PanelColorGradientSettings\r\n            title={__(\"Shadow Color Setting\", 'itmar_block_collections')}\r\n            settings={[\r\n              {\r\n                colorValue: shadowColor,\r\n                label: __(\"Choose Shadow color\", 'itmar_block_collections'),\r\n                onColorChange: (newValue) => setShadowState({ ...shadowState, shadowColor: newValue }),\r\n              },\r\n            ]}\r\n          />\r\n\r\n        </PanelBody>\r\n      }\r\n\r\n      {shadowType === 'newmor' &&\r\n        <PanelBody title={__(\"Neumorphism settings\", 'itmar_block_collections')} initialOpen={false}>\r\n          <RangeControl\r\n            value={distance}\r\n            label={__(\"Distance\", 'itmar_block_collections')}\r\n            max={50}\r\n            min={0}\r\n            onChange={(val) => setShadowState({ ...shadowState, distance: val })}\r\n            withInputField={false}\r\n          />\r\n          <RangeControl\r\n            value={intensity}\r\n            label={__(\"Intensity\", 'itmar_block_collections')}\r\n            max={100}\r\n            min={0}\r\n            onChange={(val) => setShadowState({ ...shadowState, intensity: val })}\r\n            withInputField={false}\r\n          />\r\n          <RangeControl\r\n            value={blur}\r\n            label={__(\"Blur\", 'itmar_block_collections')}\r\n            max={20}\r\n            min={0}\r\n            onChange={(val) => setShadowState({ ...shadowState, blur: val })}\r\n            withInputField={false}\r\n          />\r\n          <PanelRow>\r\n            <div className=\"light_direction\">\r\n              <RadioControl\r\n                selected={newDirection}\r\n                options={[\r\n                  { value: 'top_left' },\r\n                  { value: 'top_right' },\r\n                  { value: 'bottom_left' },\r\n                  { value: 'bottom_right' },\r\n                ]}\r\n                onChange={(changeOption) => setShadowState({ ...shadowState, newDirection: changeOption })}\r\n              />\r\n            </div>\r\n\r\n          </PanelRow>\r\n\r\n        </PanelBody>\r\n\r\n      }\r\n      {shadowType === 'claymor' &&\r\n\r\n        <PanelBody title={__(\"Claymorphism settings\", 'itmar_block_collections')} initialOpen={false}>\r\n          <RangeControl\r\n            value={opacity}\r\n            label={__(\"Opacity\", 'itmar_block_collections')}\r\n            max={1}\r\n            min={0}\r\n            step={.1}\r\n            onChange={(val) => setShadowState({ ...shadowState, opacity: val })}\r\n            withInputField={false}\r\n          />\r\n          <RangeControl\r\n            value={depth}\r\n            label=\"Depth\"\r\n            max={20}\r\n            min={0}\r\n            onChange={(val) => setShadowState({ ...shadowState, depth: val })}\r\n            withInputField={false}\r\n          />\r\n          <RangeControl\r\n            value={expand}\r\n            label=\"Expand\"\r\n            max={50}\r\n            min={0}\r\n            onChange={(val) => setShadowState({ ...shadowState, expand: val })}\r\n            withInputField={false}\r\n          />\r\n          <RangeControl\r\n            value={bdBlur}\r\n            label=\"Background Blur\"\r\n            max={10}\r\n            min={0}\r\n            onChange={(val) => setShadowState({ ...shadowState, bdBlur: val })}\r\n            withInputField={false}\r\n          />\r\n          <div className=\"light_direction claymor\">\r\n            <RadioControl\r\n              selected={clayDirection}\r\n              options={[\r\n                { value: 'right_bottom' },\r\n                { value: 'top_right' },\r\n                { value: 'top' },\r\n              ]}\r\n              onChange={(changeOption) => setShadowState({ ...shadowState, clayDirection: changeOption })}\r\n            />\r\n          </div>\r\n        </PanelBody>\r\n      }\r\n\r\n      {shadowType === 'glassmor' &&\r\n        <PanelBody title={__(\"Grassmophism settings\", 'itmar_block_collections')} initialOpen={false}>\r\n          <RangeControl\r\n            value={glassblur}\r\n            label={__(\"Glass blur\", 'itmar_block_collections')}\r\n            max={20}\r\n            min={0}\r\n            onChange={(val) => setShadowState({ ...shadowState, glassblur: val })}\r\n            withInputField={false}\r\n          />\r\n          <RangeControl\r\n            value={glassopa}\r\n            label={__(\"Glass Opacity\", 'itmar_block_collections')}\r\n            max={1}\r\n            min={0}\r\n            step={.1}\r\n            onChange={(val) => setShadowState({ ...shadowState, glassopa: val })}\r\n            withInputField={false}\r\n          />\r\n          <fieldset>\r\n            <ToggleControl\r\n              label={__(\"Show outline\", 'itmar_block_collections')}\r\n              checked={hasOutline}\r\n              onChange={() => setShadowState({ ...shadowState, hasOutline: !hasOutline })}\r\n            />\r\n          </fieldset>\r\n        </PanelBody>\r\n      }\r\n    </>\r\n\r\n  );\r\n};\r\nexport default ShadowStyle;\r\n\r\n","import {\r\n  PanelBody,\r\n  PanelRow,\r\n  RadioControl,\r\n  ToggleControl,\r\n  __experimentalUnitControl as UnitControl,\r\n} from '@wordpress/components';\r\n\r\nimport Select from 'react-select';\r\nimport { __ } from '@wordpress/i18n';\r\n\r\nconst TypographyControls = ({ title, fontStyle, initialOpen, onChange }) => {\r\n  const {\r\n    fontSize,\r\n    fontFamily,\r\n    fontWeight,\r\n    isItalic\r\n  } = fontStyle;\r\n\r\n  const fontFamilyOptions = [\r\n    { value: 'Arial, sans-serif', label: 'Arial', fontFamily: 'Arial, sans-serif' },\r\n    { value: 'Courier New, monospace', label: 'Courier New', fontFamily: 'Courier New, monospace' },\r\n    { value: 'Georgia, serif', label: 'Georgia', fontFamily: 'Georgia, serif' },\r\n    { label: 'Noto Sans JP', value: 'Noto Sans JP, sans-serif', fontFamily: 'Noto Sans JP, sans-serif' },\r\n    { label: 'Texturina', value: 'Texturina, serif', fontFamily: 'Texturina, serif' },\r\n  ];\r\n\r\n  const units = [\r\n    { value: 'px', label: 'px' },\r\n    { value: 'em', label: 'em' },\r\n    { value: 'rem', label: 'rem' },\r\n  ];\r\n\r\n  const customStyles = {\r\n    option: (provided, state) => ({\r\n      ...provided,\r\n      fontFamily: state.data.fontFamily,\r\n    }),\r\n  };\r\n\r\n  const FontSelect = ({ label, value, onChange }) => (\r\n    <>\r\n      {label && <label className=\"components-base-control__label\">{label}</label>}\r\n      <Select\r\n        options={fontFamilyOptions}\r\n        value={fontFamilyOptions.find((option) => option.value === value)}\r\n        onChange={(newValue) => {\r\n          onChange(newValue.value);\r\n        }}\r\n        styles={customStyles}\r\n      />\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <PanelBody title={title} initialOpen={initialOpen} >\r\n      <UnitControl\r\n        dragDirection=\"e\"\r\n        onChange={(newValue) => {\r\n          newValue = newValue != '' ? newValue : '0px'\r\n          const newStyle = { ...fontStyle, fontSize: newValue };\r\n          onChange(newStyle);\r\n        }}\r\n        label={__('Size', 'itmar_block_collections')}\r\n        value={fontSize}\r\n        units={units}\r\n      />\r\n\r\n      <FontSelect\r\n        label={__(\"font family\", 'itmar_block_collections')}\r\n        value={fontFamily}\r\n        onChange={(newValue) => {\r\n          const newStyle = { ...fontStyle, fontFamily: newValue };\r\n          onChange(newStyle);\r\n        }}\r\n      />\r\n\r\n      <label className=\"components-base-control__label\">{__('font weight', 'itmar_block_collections')}</label>\r\n      <PanelRow className='itmar_weight_row'>\r\n        <RadioControl\r\n          selected={fontWeight}\r\n          options={[\r\n            { label: 'LIGHT', value: \"300\" },\r\n            { label: 'REGULAR', value: \"400\" },\r\n            { label: 'MEDIUM', value: \"500\" },\r\n            { label: 'S-BOLD', value: \"600\" },\r\n            { label: 'BOLD', value: \"700\" },\r\n            { label: 'BLACK', value: \"900\" },\r\n          ]}\r\n          onChange={(newValue) => {\r\n            const newStyle = { ...fontStyle, fontWeight: newValue };\r\n            onChange(newStyle);\r\n          }}\r\n        />\r\n      </PanelRow>\r\n\r\n      <label className=\"components-base-control__label\">{__('Italic display', 'itmar_block_collections')}</label>\r\n      <ToggleControl\r\n        checked={isItalic}\r\n        onChange={(newValue) => {\r\n          const newStyle = { ...fontStyle, isItalic: newValue };\r\n          onChange(newStyle);\r\n        }}\r\n      />\r\n    </PanelBody>\r\n  );\r\n};\r\nexport default TypographyControls;\r\n","\nimport { __ } from '@wordpress/i18n';\nimport TypographyControls from '../TypographyControls'\n\nimport { StyleComp } from './StyleInput';\nimport { useState, useEffect, useRef } from '@wordpress/element';\nimport { useStyleIframe } from '../iframeFooks';\nimport ShadowStyle from '../ShadowStyle';\n\nimport {\n\tButton,\n\tPanel,\n\tPanelBody,\n\tPanelRow,\n\tToggleControl,\n\tRangeControl,\n\tRadioControl,\n\tTextControl,\n\t__experimentalBoxControl as BoxControl,\n\t__experimentalUnitControl as UnitControl,\n\t__experimentalBorderBoxControl as BorderBoxControl\n} from '@wordpress/components';\nimport {\n\tuseBlockProps,\n\tRichText,\n\tBlockAlignmentControl,\n\tBlockControls,\n\tInnerBlocks,\n\tInspectorControls,\n\tPanelColorSettings,\n\t__experimentalPanelColorGradientSettings as PanelColorGradientSettings,\n\t__experimentalBorderRadiusControl as BorderRadiusControl\n} from '@wordpress/block-editor';\n\nimport './editor.scss';\n\n//スペースのリセットバリュー\nconst padding_resetValues = {\n\ttop: '10px',\n\tleft: '10px',\n\tright: '10px',\n\tbottom: '10px',\n}\n\n//ボーダーのリセットバリュー\nconst border_resetValues = {\n\ttop: '0px',\n\tleft: '0px',\n\tright: '0px',\n\tbottom: '0px',\n}\n\nconst units = [\n\t{ value: 'px', label: 'px' },\n\t{ value: 'em', label: 'em' },\n\t{ value: 'rem', label: 'rem' },\n];\n\nexport default function Edit(props) {\n\tconst {\n\t\tattributes,\n\t\tsetAttributes\n\t} = props;\n\n\tconst {\n\t\tinputName,\n\t\tinputValue,\n\t\tplaceFolder,\n\t\tinputType,\n\t\trequired,\n\t\tfocusColor,\n\t\tbgColor,\n\t\tfont_style_input,\n\t\tbgColor_input,\n\t\tbgGradient_input,\n\t\ttextColor_input,\n\t\tradius_input,\n\t\tborder_input,\n\t\tmargin_input,\n\t\tpadding_input,\n\t\tlabelContent,\n\t\tfont_style_label,\n\t\tbgColor_label,\n\t\tbgGradient_label,\n\t\ttextColor_label,\n\t\tradius_label,\n\t\tborder_label,\n\t\tpadding_label,\n\t\tlabelSpace,\n\t\tshadow_element,\n\t\tis_shadow,\n\t\tclassName\n\t} = attributes;\n\n\tconst blockProps = useBlockProps({ style: { backgroundColor: bgColor } });\n\n\t//サイトエディタの場合はiframeにスタイルをわたす。\n\tuseStyleIframe(StyleComp, attributes);\n\n\t//必須項目の表示\n\tconst dispLabel = required.flg ? `${labelContent}(${required.display})` : labelContent;\n\n\t//親コンポーネントからのラベル幅の指定があればそれを採用して記録する\n\tconst label_width = props.context['itmar/label_width'] || 'auto';\n\tuseEffect(() => {\n\t\tsetAttributes({ labelWidth: label_width });\n\t}, [label_width]);\n\n\t//入力値の確保\n\tconst [stateValue, setInputValue] = useState(inputValue);\n\n\t//テキストエリアの高さ設定\n\tconst [height, setHeight] = useState('auto');\n\tconst textAreaRef = useRef(null);\n\n\tuseEffect(() => {\n\t\tif (textAreaRef.current) {\n\t\t\tsetHeight(`${textAreaRef.current.scrollHeight}px`);\n\t\t}\n\t}, [className]);\n\n\tfunction renderContent() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{inputType === 'text' &&\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname={inputName}\n\t\t\t\t\t\tplaceholder={className === 'is-style-line' ? dispLabel : placeFolder}\n\t\t\t\t\t\tclassName={`contact_text ${stateValue ? \"\" : \"empty\"}`}\n\t\t\t\t\t\tvalue={stateValue}\n\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\tconst newValue = event.target.value;\n\t\t\t\t\t\t\tsetInputValue(newValue);\n\t\t\t\t\t\t\tsetAttributes({ inputValue: newValue });\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t\t{inputType === 'email' &&\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tplaceholder={className === 'is-style-line' ? dispLabel : placeFolder}\n\t\t\t\t\t\tclassName={`contact_text ${stateValue ? \"\" : \"empty\"}`}\n\t\t\t\t\t\tvalue={stateValue}\n\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\tconst newValue = event.target.value;\n\t\t\t\t\t\t\tsetInputValue(newValue);\n\t\t\t\t\t\t\tsetAttributes({ inputValue: newValue });\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t\t{inputType === 'textarea' &&\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tref={textAreaRef}\n\t\t\t\t\t\tstyle={{ height }}\n\t\t\t\t\t\tname={inputName}\n\t\t\t\t\t\tplaceholder={className === 'is-style-line' ? dispLabel : placeFolder}\n\t\t\t\t\t\tclassName={`contact_text ${stateValue ? \"\" : \"empty\"}`}\n\t\t\t\t\t\tvalue={stateValue}\n\n\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\tconst newValue = event.target.value;\n\t\t\t\t\t\t\tconst scrollHeight = event.target.scrollHeight;\n\t\t\t\t\t\t\tsetInputValue(newValue);\n\t\t\t\t\t\t\tsetHeight(`${scrollHeight}px`);\n\t\t\t\t\t\t\tsetAttributes({ inputValue: newValue });\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t}\n\n\t\t\t\t<label className=\"fit-label\">\n\t\t\t\t\t{required.flg ? <>{labelContent}<span>({required.display})</span></> : labelContent}\n\t\t\t\t</label>\n\t\t\t</>\n\t\t);\n\t}\n\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls group=\"settings\">\n\t\t\t\t<PanelBody title={__(\"Input element information setting\", 'itmar_block_collections')} initialOpen={true} className=\"title_design_ctrl\">\n\t\t\t\t\t<PanelRow>\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tlabel={__(\"name attribute name\", 'itmar_block_collections')}\n\t\t\t\t\t\t\tvalue={inputName}\n\t\t\t\t\t\t\tonChange={(newVal) => setAttributes({ inputName: newVal })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</PanelRow>\n\t\t\t\t\t<PanelRow>\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tlabel={__(\"PlaceHolder\", 'itmar_block_collections')}\n\t\t\t\t\t\t\tvalue={placeFolder}\n\t\t\t\t\t\t\tisPressEnterToChange\n\t\t\t\t\t\t\tonChange={(newVal) => setAttributes({ placeFolder: newVal })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</PanelRow>\n\t\t\t\t\t<PanelRow className='itmar_weight_row'>\n\t\t\t\t\t\t<RadioControl\n\t\t\t\t\t\t\tselected={inputType}\n\t\t\t\t\t\t\tlabel={__(\"Kind of Input Element\", 'itmar_block_collections')}\n\t\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t\t{ label: 'TEXT', value: \"text\" },\n\t\t\t\t\t\t\t\t{ label: 'E-MAIL', value: \"email\" },\n\t\t\t\t\t\t\t\t{ label: 'AREA', value: \"textarea\" },\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\tonChange={(changeOption) => { setAttributes({ inputType: changeOption }); }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</PanelRow>\n\n\t\t\t\t\t<PanelRow className='labelRequierd_row'>\n\t\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\t\tlabel={__('Required input', 'itmar_block_collections')}\n\t\t\t\t\t\t\tchecked={required.flg}\n\t\t\t\t\t\t\tonChange={(newVal) => {\n\t\t\t\t\t\t\t\tconst newObj = { ...required, flg: newVal }\n\t\t\t\t\t\t\t\tsetAttributes({ required: newObj })\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{required.flg &&\n\t\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\t\tlabel={__(\"Show 'required'\", 'itmar_block_collections')}\n\t\t\t\t\t\t\t\tvalue={required.display}\n\t\t\t\t\t\t\t\tisPressEnterToChange\n\t\t\t\t\t\t\t\tonChange={(newVal) => {\n\t\t\t\t\t\t\t\t\tconst newObj = { ...required, display: newVal }\n\t\t\t\t\t\t\t\t\tsetAttributes({ required: newObj })\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t</PanelRow>\n\n\n\t\t\t\t</PanelBody>\n\t\t\t\t<PanelBody title={__(\"Label Settings\", 'itmar_block_collections')} initialOpen={true} className=\"title_design_ctrl\">\n\t\t\t\t\t<PanelRow\n\t\t\t\t\t\tclassName='labelInfo_row'\n\t\t\t\t\t>\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tlabel={__(\"Text of Label\", 'itmar_block_collections')}\n\t\t\t\t\t\t\tlabelPosition=\"top\"\n\t\t\t\t\t\t\tvalue={labelContent}\n\t\t\t\t\t\t\tisPressEnterToChange\n\t\t\t\t\t\t\tonChange={(newValue) => setAttributes({ labelContent: newValue })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</PanelRow>\n\t\t\t\t</PanelBody>\n\n\t\t\t</InspectorControls>\n\t\t\t<InspectorControls group=\"styles\">\n\t\t\t\t<PanelBody title={__(\"Global settings\", 'itmar_block_collections')} initialOpen={false} className=\"title_design_ctrl\">\n\t\t\t\t\t<PanelColorGradientSettings\n\t\t\t\t\t\ttitle={__(\"Background Color Setting\", 'itmar_block_collections')}\n\t\t\t\t\t\tsettings={[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolorValue: bgColor,\n\t\t\t\t\t\t\t\tlabel: __(\"Choose Background color\", 'itmar_block_collections'),\n\t\t\t\t\t\t\t\tonColorChange: (newValue) => setAttributes({ bgColor: newValue }),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]}\n\t\t\t\t\t/>\n\t\t\t\t\t<PanelColorGradientSettings\n\t\t\t\t\t\ttitle={__(\"Focus Color Setting\", 'itmar_block_collections')}\n\t\t\t\t\t\tsettings={[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolorValue: focusColor,\n\t\t\t\t\t\t\t\tlabel: __(\"Choose Focus color\", 'itmar_block_collections'),\n\t\t\t\t\t\t\t\tonColorChange: (newValue) => setAttributes({ focusColor: newValue }),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]}\n\t\t\t\t\t/>\n\t\t\t\t\t<BoxControl\n\t\t\t\t\t\tlabel={__(\"Margin settings\", 'itmar_block_collections')}\n\t\t\t\t\t\tvalues={margin_input}\n\t\t\t\t\t\tonChange={value => setAttributes({ margin_input: value })}\n\t\t\t\t\t\tunits={units}\t// 許可する単位\n\t\t\t\t\t\tallowReset={true}\t// リセットの可否\n\t\t\t\t\t\tresetValues={padding_resetValues}\t// リセット時の値\n\t\t\t\t\t/>\n\t\t\t\t\t<BoxControl\n\t\t\t\t\t\tlabel={__(\"Padding settings\", 'itmar_block_collections')}\n\t\t\t\t\t\tvalues={padding_input}\n\t\t\t\t\t\tonChange={value => setAttributes({ padding_input: value })}\n\t\t\t\t\t\tunits={units}\t// 許可する単位\n\t\t\t\t\t\tallowReset={true}\t// リセットの可否\n\t\t\t\t\t\tresetValues={padding_resetValues}\t// リセット時の値\n\n\t\t\t\t\t/>\n\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\tlabel={__('Is Shadow', 'itmar_block_collections')}\n\t\t\t\t\t\tchecked={is_shadow}\n\t\t\t\t\t\tonChange={(newVal) => {\n\t\t\t\t\t\t\tsetAttributes({ is_shadow: newVal })\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</PanelBody>\n\t\t\t\t<PanelBody title={__(\"Input Box style settings\", 'itmar_block_collections')} initialOpen={false} className=\"title_design_ctrl\">\n\n\t\t\t\t\t<TypographyControls\n\t\t\t\t\t\ttitle={__('Typography', 'itmar_block_collections')}\n\t\t\t\t\t\tfontStyle={font_style_input}\n\t\t\t\t\t\tonChange={(newStyle) => {\n\t\t\t\t\t\t\tsetAttributes({ font_style_input: newStyle })\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tinitialOpen={false}\n\t\t\t\t\t/>\n\t\t\t\t\t<PanelColorGradientSettings\n\t\t\t\t\t\ttitle={__(\"Color Settings\", 'itmar_block_collections')}\n\t\t\t\t\t\tsettings={[{\n\t\t\t\t\t\t\tcolorValue: textColor_input,\n\t\t\t\t\t\t\tlabel: __(\"Choose Text color\", 'itmar_block_collections'),\n\t\t\t\t\t\t\tonColorChange: (newValue) => setAttributes({ textColor_input: newValue }),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcolorValue: bgColor_input,\n\t\t\t\t\t\t\tgradientValue: bgGradient_input,\n\n\t\t\t\t\t\t\tlabel: __(\"Choose Background color\", 'itmar_block_collections'),\n\t\t\t\t\t\t\tonColorChange: (newValue) => setAttributes({ bgColor_input: newValue }),\n\t\t\t\t\t\t\tonGradientChange: (newValue) => setAttributes({ bgGradient_input: newValue }),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t]}\n\t\t\t\t\t/>\n\t\t\t\t\t<PanelBody title={__(\"Border Settings\", 'itmar_block_collections')} initialOpen={false} className=\"border_design_ctrl\">\n\t\t\t\t\t\t<BorderBoxControl\n\n\t\t\t\t\t\t\tonChange={(newValue) => setAttributes({ border_input: newValue })}\n\t\t\t\t\t\t\tvalue={border_input}\n\t\t\t\t\t\t\tallowReset={true}\t// リセットの可否\n\t\t\t\t\t\t\tresetValues={border_resetValues}\t// リセット時の値\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<BorderRadiusControl\n\t\t\t\t\t\t\tvalues={radius_input}\n\t\t\t\t\t\t\tonChange={(newBrVal) =>\n\t\t\t\t\t\t\t\tsetAttributes({ radius_input: typeof newBrVal === 'string' ? { \"value\": newBrVal } : newBrVal })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</PanelBody>\n\n\t\t\t\t</PanelBody>\n\t\t\t\t<PanelBody title={__(\"Label style settings\", 'itmar_block_collections')} initialOpen={false} className=\"title_design_ctrl\">\n\n\t\t\t\t\t<TypographyControls\n\t\t\t\t\t\ttitle={__('Typography', 'itmar_block_collections')}\n\t\t\t\t\t\tfontStyle={font_style_label}\n\t\t\t\t\t\tonChange={(newStyle) => {\n\t\t\t\t\t\t\tsetAttributes({ font_style_label: newStyle })\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tinitialOpen={false}\n\t\t\t\t\t/>\n\t\t\t\t\t<PanelColorGradientSettings\n\t\t\t\t\t\ttitle={__(\"Label Color Setting\", 'itmar_block_collections')}\n\t\t\t\t\t\tsettings={[{\n\t\t\t\t\t\t\tcolorValue: textColor_label,\n\t\t\t\t\t\t\tlabel: __(\"Choose Text color\", 'itmar_block_collections'),\n\t\t\t\t\t\t\tonColorChange: (newValue) => setAttributes({ textColor_label: newValue }),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcolorValue: bgColor_label,\n\t\t\t\t\t\t\tgradientValue: bgGradient_label,\n\n\t\t\t\t\t\t\tlabel: __(\"Choose Background color\", 'itmar_block_collections'),\n\t\t\t\t\t\t\tonColorChange: (newValue) => setAttributes({ bgColor_label: newValue }),\n\t\t\t\t\t\t\tonGradientChange: (newValue) => setAttributes({ bgGradient_label: newValue }),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t]}\n\t\t\t\t\t/>\n\t\t\t\t\t<PanelBody title={__(\"Border Settings\", 'itmar_block_collections')} initialOpen={false} className=\"border_design_ctrl\">\n\t\t\t\t\t\t<BorderBoxControl\n\n\t\t\t\t\t\t\tonChange={(newValue) => setAttributes({ border_label: newValue })}\n\t\t\t\t\t\t\tvalue={border_label}\n\t\t\t\t\t\t\tallowReset={true}\t// リセットの可否\n\t\t\t\t\t\t\tresetValues={border_resetValues}\t// リセット時の値\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<BorderRadiusControl\n\t\t\t\t\t\t\tvalues={radius_label}\n\t\t\t\t\t\t\tonChange={(newBrVal) =>\n\t\t\t\t\t\t\t\tsetAttributes({ radius_label: typeof newBrVal === 'string' ? { \"value\": newBrVal } : newBrVal })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</PanelBody>\n\t\t\t\t\t<BoxControl\n\t\t\t\t\t\tlabel={__(\"Padding settings\", 'itmar_block_collections')}\n\t\t\t\t\t\tvalues={padding_label}\n\t\t\t\t\t\tonChange={value => setAttributes({ padding_label: value })}\n\t\t\t\t\t\tunits={units}\t// 許可する単位\n\t\t\t\t\t\tallowReset={true}\t// リセットの可否\n\t\t\t\t\t\tresetValues={padding_resetValues}\t// リセット時の値\n\n\t\t\t\t\t/>\n\t\t\t\t\t<UnitControl\n\t\t\t\t\t\tdragDirection=\"e\"\n\t\t\t\t\t\tonChange={(newValue) => setAttributes({ labelSpace: newValue })}\n\t\t\t\t\t\tlabel={__('Spacing with textbox', 'itmar_block_collections')}\n\t\t\t\t\t\tvalue={labelSpace}\n\t\t\t\t\t/>\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\n\t\t\t<div {...blockProps}>\n\t\t\t\t<StyleComp attributes={attributes}>\n\t\t\t\t\t{is_shadow ? (\n\t\t\t\t\t\t<ShadowStyle\n\t\t\t\t\t\t\tshadowStyle={{ ...shadow_element, backgroundColor: bgColor }}\n\t\t\t\t\t\t\tonChange={(newStyle, newState) => {\n\t\t\t\t\t\t\t\tsetAttributes({ shadow_result: newStyle.style });\n\t\t\t\t\t\t\t\tsetAttributes({ shadow_element: newState })\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{renderContent()}\n\t\t\t\t\t\t</ShadowStyle>\n\t\t\t\t\t) : (\n\t\t\t\t\t\trenderContent()\n\t\t\t\t\t)}\n\t\t\t\t</StyleComp>\n\t\t\t</div>\n\t\t</>\n\n\t);\n}\n","const createRGB = (inputStr) => {\r\n\t//１６進数変換の関数\r\n\tfunction componentToHex(c) {\r\n\t\tconst hex = parseInt(c, 10).toString(16);\r\n\t\treturn hex.length === 1 ? \"0\" + hex : hex;\r\n\t}\r\n\r\n\tlet resultStr;\r\n\tlet rgb = [];\r\n\r\n\t// #000000 形式の場合\r\n\tif (/^#[0-9a-fA-F]{6}$/.test(inputStr)) {\r\n\t\trgb = [\r\n\t\t\tinputStr.slice(1, 3),\r\n\t\t\tinputStr.slice(3, 5),\r\n\t\t\tinputStr.slice(5, 7)\r\n\t\t];\r\n\t}\r\n\t// rgb(0,0,0) 形式の場合\r\n\telse if ((resultStr = inputStr.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/))) {\r\n\t\trgb = [\r\n\t\t\tcomponentToHex(resultStr[1]),\r\n\t\t\tcomponentToHex(resultStr[2]),\r\n\t\t\tcomponentToHex(resultStr[3])\r\n\t\t];\r\n\t} else {\r\n\t\t// サポートされていない形式の場合はデフォルトの値を設定する\r\n\t\trgb = [\"ff\", \"ff\", \"ff\"];\r\n\t}\r\n\treturn rgb;\r\n}\r\n\r\nexport function hslToRgb16(hue, saturation, lightness) {\r\n\tvar result = false;\r\n\r\n\tif (((hue || hue === 0) && hue <= 360) && ((saturation || saturation === 0) && saturation <= 100) && ((lightness || lightness === 0) && lightness <= 100)) {\r\n\t\tvar red = 0,\r\n\t\t\tgreen = 0,\r\n\t\t\tblue = 0,\r\n\t\t\tq = 0,\r\n\t\t\tp = 0,\r\n\t\t\thueToRgb;\r\n\r\n\t\thue = Number(hue) / 360;\r\n\t\tsaturation = Number(saturation) / 100;\r\n\t\tlightness = Number(lightness) / 100;\r\n\r\n\t\tif (saturation === 0) {\r\n\t\t\tred = lightness;\r\n\t\t\tgreen = lightness;\r\n\t\t\tblue = lightness;\r\n\t\t} else {\r\n\t\t\thueToRgb = function (p, q, t) {\r\n\t\t\t\tif (t < 0) t += 1;\r\n\t\t\t\tif (t > 1) t -= 1;\r\n\r\n\t\t\t\tif (t < 1 / 6) {\r\n\t\t\t\t\tp += (q - p) * 6 * t;\r\n\t\t\t\t} else if (t < 1 / 2) {\r\n\t\t\t\t\tp = q;\r\n\t\t\t\t} else if (t < 2 / 3) {\r\n\t\t\t\t\tp += (q - p) * (2 / 3 - t) * 6;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn p;\r\n\t\t\t};\r\n\r\n\t\t\tif (lightness < 0.5) {\r\n\t\t\t\tq = lightness * (1 + saturation);\r\n\t\t\t} else {\r\n\t\t\t\tq = lightness + saturation - lightness * saturation;\r\n\t\t\t}\r\n\t\t\tp = 2 * lightness - q;\r\n\r\n\t\t\tred = hueToRgb(p, q, hue + 1 / 3);\r\n\t\t\tgreen = hueToRgb(p, q, hue);\r\n\t\t\tblue = hueToRgb(p, q, hue - 1 / 3);\r\n\t\t}\r\n\r\n\t\tresult = `#${Math.round(red * 255).toString(16).padStart(2, '0')}${Math.round(green * 255).toString(16).padStart(2, '0')}${Math.round(blue * 255).toString(16).padStart(2, '0')}`;\r\n\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nexport function rgb16ToHsl(strRgb16) {\r\n\tlet rgb = createRGB(strRgb16);\r\n\tlet red = rgb[0];\r\n\tlet green = rgb[1];\r\n\tlet blue = rgb[2];\r\n\tlet result = false;\r\n\r\n\tif (((red || red === 0) && String(red).match(/^[0-9a-f]{2}$/i)) && ((green || green === 0) && String(green).match(/^[0-9a-f]{2}$/i)) && ((blue || blue === 0) && String(blue).match(/^[0-9a-f]{2}$/i))) {\r\n\t\tlet hue = 0,\r\n\t\t\tsaturation = 0,\r\n\t\t\tlightness = 0,\r\n\t\t\tmax = 0,\r\n\t\t\tmin = 0,\r\n\t\t\tdiff = 0;\r\n\r\n\t\tred = parseInt(red, 16) / 255;\r\n\t\tgreen = parseInt(green, 16) / 255;\r\n\t\tblue = parseInt(blue, 16) / 255;\r\n\t\tmax = Math.max(red, green, blue);\r\n\t\tmin = Math.min(red, green, blue);\r\n\t\tlightness = (max + min) / 2;\r\n\r\n\t\tif (max !== min) {\r\n\t\t\tdiff = max - min;\r\n\r\n\t\t\tif (lightness > 0.5) {\r\n\t\t\t\tsaturation = diff / (2 - max - min);\r\n\t\t\t} else {\r\n\t\t\t\tsaturation = diff / (max + min);\r\n\t\t\t}\r\n\r\n\t\t\tif (max === red) {\r\n\t\t\t\thue = (green - blue) / diff;\r\n\t\t\t} else if (max === green) {\r\n\t\t\t\thue = 2 + (blue - red) / diff;\r\n\t\t\t} else {\r\n\t\t\t\thue = 4 + (red - green) / diff;\r\n\t\t\t}\r\n\r\n\t\t\thue /= 6;\r\n\t\t}\r\n\r\n\t\tresult = {\r\n\t\t\thue: Math.round(hue * 360),\r\n\t\t\tsaturation: Math.round(saturation * 100),\r\n\t\t\tlightness: Math.round(lightness * 100)\r\n\t\t};\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nexport function HexToRGB(strRgb16) {\r\n\tlet rgb = createRGB(strRgb16);\r\n\tlet red = rgb[0];\r\n\tlet green = rgb[1];\r\n\tlet blue = rgb[2];\r\n\tlet result = false;\r\n\r\n\tif (((red || red === 0) && String(red).match(/^[0-9a-f]{2}$/i)) && ((green || green === 0) && String(green).match(/^[0-9a-f]{2}$/i)) && ((blue || blue === 0) && String(blue).match(/^[0-9a-f]{2}$/i))) {\r\n\r\n\r\n\t\tred = parseInt(red, 16);\r\n\t\tgreen = parseInt(green, 16);\r\n\t\tblue = parseInt(blue, 16);\r\n\r\n\r\n\t\tresult = {\r\n\t\t\tred: Math.round(red),\r\n\t\t\tgreen: Math.round(green),\r\n\t\t\tblue: Math.round(blue)\r\n\t\t};\r\n\t}\r\n\r\n\treturn result;\r\n};","import { useEffect } from '@wordpress/element';\r\nimport { useDeepCompareEffect } from './CustomFooks';\r\nimport { ServerStyleSheet } from 'styled-components';\r\nimport { renderToString } from 'react-dom/server';\r\n\r\n\r\nexport function useStyleIframe(StyleComp, attributes) {\r\n  //サイトエディタの場合はiframeにスタイルをわたす。\r\n  useDeepCompareEffect(() => {\r\n    const iframeInstance = document.getElementsByName('editor-canvas')[0];\r\n\r\n    if (iframeInstance) {\r\n      const iframeDocument = iframeInstance.contentDocument || iframeInstance.contentWindow.document;\r\n      const sheet = new ServerStyleSheet();\r\n      renderToString(sheet.collectStyles(<StyleComp attributes={attributes} />));\r\n      const styleTags = sheet.getStyleTags();\r\n      const styleContent = styleTags.replace(/<style[^>]*>|<\\/style>/g, '');\r\n\r\n      const iframeStyleTag = iframeDocument.createElement('style');\r\n      iframeStyleTag.innerHTML = styleContent;\r\n\r\n      // Append the new style tag to the iframe's document head\r\n      iframeDocument.head.appendChild(iframeStyleTag);\r\n      // Return a cleanup function to remove the style tag\r\n      return () => {\r\n        iframeDocument.head.removeChild(iframeStyleTag);\r\n      };\r\n    }\r\n  }, [attributes]);\r\n}\r\n\r\nexport function useFontawesomeIframe() {\r\n  //iframeにfontawesomeを読み込む\r\n  useEffect(() => {\r\n    const iframeInstance = document.getElementsByName('editor-canvas')[0];\r\n\r\n    if (iframeInstance) {\r\n      const iframeDocument = iframeInstance.contentDocument || iframeInstance.contentWindow.document;\r\n      const scriptElement = iframeDocument.createElement(\"script\");\r\n      scriptElement.setAttribute(\"src\", \"../../assets/fontawesome.js\");\r\n      //scriptElement.setAttribute(\"crossorigin\", \"anonymous\");\r\n\r\n      iframeDocument.body.appendChild(scriptElement);\r\n\r\n      // Return a cleanup function to remove the script tag\r\n      return () => {\r\n        iframeDocument.body?.removeChild(scriptElement);\r\n      };\r\n    }\r\n  }, []);\r\n}\r\n\r\n"],"names":["useDeepCompareEffect","callback","dependencies","dependenciesRef","useRef","isEqual","current","useEffect","dirctionDigit","direction","distance","destTopLeft","destTopRight","destBottomLeft","destBottomRight","topLeft","topRight","bottomLeft","bottmRight","isGradient","colorValue","includes","_ref","shadowStyle","onChange","shadowState","setShadowState","useState","shadowType","spread","lateral","longitude","nomalBlur","shadowColor","blur","intensity","newDirection","clayDirection","embos","opacity","depth","bdBlur","expand","glassblur","glassopa","hasOutline","shadowElm","baseColor","style","boxShadow","dispatch","createNotice","__","type","isDismissible","hslValue","rgb16ToHsl","lightVal","lightness","darkVal","lightValue","hslToRgb16","hue","saturation","darkValue","dircObj","baseStyle","border","background","rgbValue","HexToRGB","outsetObj","insetObj","backdropFilter","red","green","blue","backgroundColor","borderRightColor","borderBottomColor","ShadowElm","createElement","Fragment","PanelBody","title","initialOpen","className","RadioControl","selected","options","label","value","changeOption","RangeControl","max","min","val","withInputField","PanelColorGradientSettings","settings","onColorChange","newValue","PanelRow","step","ToggleControl","checked","fontStyle","fontSize","fontFamily","fontWeight","isItalic","fontFamilyOptions","customStyles","option","provided","state","data","UnitControl","dragDirection","newStyle","units","_ref2","Select","find","styles","padding_resetValues","top","left","right","bottom","border_resetValues","Edit","props","attributes","setAttributes","inputName","inputValue","placeFolder","inputType","required","focusColor","bgColor","font_style_input","bgColor_input","bgGradient_input","textColor_input","radius_input","border_input","margin_input","padding_input","labelContent","font_style_label","bgColor_label","bgGradient_label","textColor_label","radius_label","border_label","padding_label","labelSpace","shadow_element","is_shadow","blockProps","useBlockProps","useStyleIframe","StyleComp","dispLabel","flg","display","label_width","context","labelWidth","stateValue","setInputValue","height","setHeight","textAreaRef","renderContent","name","placeholder","event","target","ref","scrollHeight","InspectorControls","group","TextControl","newVal","isPressEnterToChange","newObj","labelPosition","BoxControl","values","allowReset","resetValues","TypographyControls","gradientValue","onGradientChange","BorderBoxControl","BorderRadiusControl","newBrVal","ShadowStyle","newState","shadow_result","createRGB","inputStr","componentToHex","c","hex","parseInt","toString","length","resultStr","rgb","test","slice","match","result","hueToRgb","q","p","Number","t","Math","round","padStart","strRgb16","String","diff","iframeInstance","document","getElementsByName","iframeDocument","contentDocument","contentWindow","sheet","ServerStyleSheet","renderToString","collectStyles","styleContent","getStyleTags","replace","iframeStyleTag","innerHTML","head","appendChild","removeChild"],"sourceRoot":""}